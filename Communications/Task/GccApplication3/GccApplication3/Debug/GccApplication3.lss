
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b7  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000887  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000286  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032e  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f6  00000000  00000000  00001482  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
	while (!(UCSRA & (1 << RXC)));
	return UDR;
}
void sendText(char *txt){
	while(*txt) USART_Transmit(*txt++);
}
  6c:	90 bd       	out	0x20, r25	; 32
  6e:	89 b9       	out	0x09, r24	; 9
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
  78:	08 95       	ret

0000007a <USART_Transmit>:
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <USART_Transmit>
  7e:	8c b9       	out	0x0c, r24	; 12
  80:	08 95       	ret

00000082 <USART_Receive>:
  82:	5f 9b       	sbis	0x0b, 7	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <USART_Receive>
  86:	8c b1       	in	r24, 0x0c	; 12
  88:	08 95       	ret

0000008a <main>:

int main(void) {
	USART_Init(MYUBRR);
  8a:	87 e6       	ldi	r24, 0x67	; 103
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
    while(1){
	char received_char = USART_Receive();
  92:	0e 94 41 00 	call	0x82	; 0x82 <USART_Receive>
  96:	c8 2f       	mov	r28, r24
	char enter = USART_Receive();
  98:	0e 94 41 00 	call	0x82	; 0x82 <USART_Receive>
	if(enter == '\r'){  
  9c:	8d 30       	cpi	r24, 0x0D	; 13
  9e:	c9 f7       	brne	.-14     	; 0x92 <main+0x8>
	if (received_char >= '0' && received_char <= '9') {
  a0:	80 ed       	ldi	r24, 0xD0	; 208
  a2:	8c 0f       	add	r24, r28
  a4:	8a 30       	cpi	r24, 0x0A	; 10
  a6:	a8 f7       	brcc	.-22     	; 0x92 <main+0x8>
		int num = received_char - '0';  
		num += 1;
  a8:	8c 2f       	mov	r24, r28
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	8f 97       	sbiw	r24, 0x2f	; 47
		if(num == 10){
  ae:	8a 30       	cpi	r24, 0x0A	; 10
  b0:	91 05       	cpc	r25, r1
  b2:	21 f4       	brne	.+8      	; 0xbc <main+0x32>
		  USART_Transmit('0');
  b4:	80 e3       	ldi	r24, 0x30	; 48
  b6:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		  continue;
  ba:	eb cf       	rjmp	.-42     	; 0x92 <main+0x8>
		}                      
		USART_Transmit(num + '0');
  bc:	80 5d       	subi	r24, 0xD0	; 208
  be:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		USART_Transmit('\r');      
  c2:	8d e0       	ldi	r24, 0x0D	; 13
  c4:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
  c8:	e4 cf       	rjmp	.-56     	; 0x92 <main+0x8>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
